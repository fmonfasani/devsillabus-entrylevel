generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  ADMIN
  STUDENT
}

enum CourseType {
  FULLSTACK
  DEVOPS
}

enum CourseLevel {
  ENTRY_LEVEL
  BOOTCAMP
  MID_LEVEL
  SENIOR
}

enum ResourceType {
  VIDEO
  DOCUMENT
  LAB
  EXTERNAL_LINK
}

enum AssessmentType {
  QUIZ
  LAB
}

enum ProgressStatus {
  AVAILABLE
  LOCKED
  IN_PROGRESS
  COMPLETED
}


model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String?
  passwordHash String
  role         Role      @default(STUDENT)
  createdAt    DateTime  @default(now())

  enrollments  Enrollment[]
  progress     ChapterProgress[]
}

model Course {
  id            Int        @id @default(autoincrement())
  name          String
  slug          String     @unique
  description   String?
  type          CourseType
  level         CourseLevel
  durationWeeks Int?
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())

  chapters      Chapter[]
  enrollments   Enrollment[]
}

model Chapter {
  id                   Int        @id @default(autoincrement())
  courseId             Int
  weekNumber           Int
  title                String
  description          String?
  theoreticalContent   String?   @db.Text
  practicalRequirements String?  @db.Text
  minScoreTheory       Int
  minScorePractice     Int
  unlockDate           DateTime?
  isPublished          Boolean   @default(false)
  createdAt            DateTime  @default(now())

  course     Course   @relation(fields: [courseId], references: [id])
  resources  ChapterResource[]
  assessments Assessment[]
  progress   ChapterProgress[]

  @@unique([courseId, weekNumber])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model ChapterProgress {
  id            Int            @id @default(autoincrement())
  userId        Int
  chapterId     Int
  status        ProgressStatus
  theoryScore   Int?
  practiceScore Int?
  startedAt     DateTime?
  completedAt   DateTime?
  lastAccessed  DateTime?

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([userId, chapterId])
}

model ChapterResource {
  id         Int          @id @default(autoincrement())
  chapterId  Int
  type       ResourceType
  title      String
  url        String?
  content    String?      @db.Text
  orderIndex Int
  isRequired Boolean      @default(false)

  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([chapterId, orderIndex])
}

model Assessment {
  id               Int             @id @default(autoincrement())
  chapterId        Int
  type             AssessmentType
  title            String
  instructions     String?         @db.Text
  maxAttempts      Int?
  timeLimitMinutes Int?
  passingScore     Int

  chapter Chapter @relation(fields: [chapterId], references: [id])
}
